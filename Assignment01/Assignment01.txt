1.2.1)
	insertionSort (7: (9: (2: [])))
	insert 7 (insertionSort (9: (2: [])))
	insert 7 (insert 9 (insertionSort (2: [])))
	insert 7 (insert 9 (insert 2 []))
	insert 7 (insert 9 [2])
	insert 7 [2,9]
	[2,7,9]

1.2.2)
	a) 2_1
	b) 2_2
	c) 2_3
	d) 2_4
	e) (2_2)_2
	f) (2_2)_2_2
	g) (2_2)_2_2
	The pattern is the 'sub' computation.


1.3.1)
	a) twice is 2_1 = 2, so 0 + 1 + 1 = 2.
	b) twice twice is 2_2 = 4, so 1 * 2^4

1.3.2)
	a) We do not find it worrying, but like in this case it can cause very large growth.
	b) There are multiple types possible:
		String,  String  -> String
		Integer, Integer -> Integer
		Integer, Double  -> Double
		Double,  Integer -> Double
		Double,  Double  -> Double


1.4.1)
	Prefix has faster execution, but can also be ambiguous
	because left and right associativity matters and can be hard to see.
	This makes prefix harder to read than postfix.

1.4.2)
	This allows the functions to be written in another order,
	this can improve the readability and understandability of the program.

1.4.3)
	infixl : 1011
	1 ⊕ 0 ⊕ 1 ⊕ 1 = (2 * 1 + 0) ⊕ 1 ⊕ 1 = 2 ⊕ 1 ⊕ 1 = (2 * 2 + 1) ⊕ 1 = 5 ⊕ 1 = 2 * 5 + 1 = 11
	infixr : 1011
	1 ⊕ 0 ⊕ 1 ⊕ 1 = 1 ⊕ 0 ⊕ (2 * 1 + 1) = 1 ⊕ 0 ⊕ 3 = 1 ⊕ (2 * 0 + 3) = 1 ⊕ 3 = 2 * 1 + 3 = 5
	When infixr is used the binary number is no longer correctly transformed to a decimal number.

1.4.4)
	((((f x) >= 0) && a) || (((((g x) y) * 7) + 10) == (b - 5)))

